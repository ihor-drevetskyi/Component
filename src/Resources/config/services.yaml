services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false       # Allows optimizing the container by removing unused services; this also means
    # fetching services directly from the container via $container->get() won't work.
    # The best practice is to be explicit about your dependencies anyway.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  ComponentBundle\:
    resource: '../../*'
    exclude: '../../{Entity,Migrations,Tests}'

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  memcached:
    class: Memcached
    factory: Symfony\Component\Cache\Adapter\MemcachedAdapter::createConnection
    arguments: ['%memcached.servers%', '%memcached.config%']

  ComponentBundle\EventListener\LocaleListener:
    arguments: ['@service_container']
    tags:
      - { name: kernel.event_listener }

  ComponentBundle\Event\FormEvent:
    lazy: true

  ComponentBundle\Factory\Factory:
    lazy: true

  ComponentBundle\Event\WebsiteEvent:
    lazy: true

  ComponentBundle\Helper\RequestHelper:
    lazy: true

  ComponentBundle\Generator\RandomnessGenerator:
    lazy: true

  # паблик алиасы для детект сервисов чтоб определять текущий view

  ComponentBundle\Helper\DeviceView:
    alias: 'mobile_detect.device_view'
    public: true

  ComponentBundle\Service\MobileDetector:
    arguments: ['@ComponentBundle\Helper\DeviceView', '@service_container']
    lazy: true

  SunCat\MobileDetectBundle\DeviceDetector\MobileDetector:
    alias: 'mobile_detect.mobile_detector'
    public: true
